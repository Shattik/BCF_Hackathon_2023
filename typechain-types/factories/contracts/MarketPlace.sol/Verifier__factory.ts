/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Verifier,
  VerifierInterface,
} from "../../../contracts/MarketPlace.sol/Verifier";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "artId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "ownerAddress",
        type: "address",
      },
    ],
    name: "issueVerifying",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "idNo",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "ownerAddress",
        type: "address",
      },
    ],
    name: "verifyCertificate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610536806100606000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806394b465251461003b578063ade442921461006b575b600080fd5b61005560048036038101906100509190610367565b610087565b60405161006291906103c2565b60405180910390f35b61008560048036038101906100809190610367565b61016a565b005b600080600090505b60018054905081101561015e57600181815481106100b0576100af6103dd565b5b906000526020600020906002020160000154840361014b578273ffffffffffffffffffffffffffffffffffffffff16600182815481106100f3576100f26103dd565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361014a576001915050610164565b5b80806101569061043b565b91505061008f565b50600090505b92915050565b61017382610265565b6101b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a9906104e0565b60405180910390fd5b600060405180604001604052808481526020018373ffffffffffffffffffffffffffffffffffffffff16815250905060018190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b600080600090505b6001805490508110156102c3576001818154811061028e5761028d6103dd565b5b90600052602060002090600202016000015483036102b05760009150506102c9565b80806102bb9061043b565b91505061026d565b50600190505b919050565b600080fd5b6000819050919050565b6102e6816102d3565b81146102f157600080fd5b50565b600081359050610303816102dd565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061033482610309565b9050919050565b61034481610329565b811461034f57600080fd5b50565b6000813590506103618161033b565b92915050565b6000806040838503121561037e5761037d6102ce565b5b600061038c858286016102f4565b925050602061039d85828601610352565b9150509250929050565b60008115159050919050565b6103bc816103a7565b82525050565b60006020820190506103d760008301846103b3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610446826102d3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036104785761047761040c565b5b600182019050919050565b600082825260208201905092915050565b7f494e56414c494400000000000000000000000000000000000000000000000000600082015250565b60006104ca600783610483565b91506104d582610494565b602082019050919050565b600060208201905081810360008301526104f9816104bd565b905091905056fea26469706673582212208704195e1b1154dc82848fba731369074134c9376846b0adc35a03c113c1e9cd64736f6c63430008120033";

type VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Verifier__factory extends ContractFactory {
  constructor(...args: VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Verifier> {
    return super.deploy(overrides || {}) as Promise<Verifier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Verifier {
    return super.attach(address) as Verifier;
  }
  override connect(signer: Signer): Verifier__factory {
    return super.connect(signer) as Verifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifierInterface {
    return new utils.Interface(_abi) as VerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Verifier {
    return new Contract(address, _abi, signerOrProvider) as Verifier;
  }
}
