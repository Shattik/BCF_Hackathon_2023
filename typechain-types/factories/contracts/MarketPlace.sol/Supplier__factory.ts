/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Supplier,
  SupplierInterface,
} from "../../../contracts/MarketPlace.sol/Supplier";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "artID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "addArtQuantity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "artID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "setArtQuantity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101cf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a2617a141461003b578063ffb043bd14610057575b600080fd5b610055600480360381019061005091906100f6565b610073565b005b610071600480360381019061006c91906100f6565b61008e565b005b80600080848152602001908152602001600020819055505050565b8060008084815260200190815260200160002060008282546100b09190610165565b925050819055505050565b600080fd5b6000819050919050565b6100d3816100c0565b81146100de57600080fd5b50565b6000813590506100f0816100ca565b92915050565b6000806040838503121561010d5761010c6100bb565b5b600061011b858286016100e1565b925050602061012c858286016100e1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610170826100c0565b915061017b836100c0565b925082820190508082111561019357610192610136565b5b9291505056fea26469706673582212205233dcdbb3be6c8032e403c4cbed3b756ba5e94af53dbcfe0152af39a20fc96964736f6c63430008120033";

type SupplierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SupplierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Supplier__factory extends ContractFactory {
  constructor(...args: SupplierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Supplier> {
    return super.deploy(overrides || {}) as Promise<Supplier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Supplier {
    return super.attach(address) as Supplier;
  }
  override connect(signer: Signer): Supplier__factory {
    return super.connect(signer) as Supplier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SupplierInterface {
    return new utils.Interface(_abi) as SupplierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Supplier {
    return new Contract(address, _abi, signerOrProvider) as Supplier;
  }
}
